//
//  ContentView.swift
//  FinancialTamer
//
//  Created by –ê—Ä—Ç–µ–º –¢–∞–±–µ–Ω—Å–∫–∏–π on 08.06.2025.
//

import SwiftUI

enum AccountViewMode {
    case view
    case edit
}

struct AccountView: View {
    
    @ObservedObject var model = AccountModel()
    
    @State private var currentMode: AccountViewMode = .view
    @State private var showingCurrencySheet = false
    @State var spoilerIsOn = false
    
    @State var editableBalanceString: String = ""
    
    var body: some View {
        NavigationStack {
            ZStack(alignment: .bottomTrailing) {
                Color.background.ignoresSafeArea(edges: .top)
                
                List {
                    
                    HStack {
                        Text("üí∞    –ë–∞–ª–∞–Ω—Å")
                        Spacer()
                        if currentMode == .edit {
                            
                            Button("", systemImage: "document.on.clipboard") {
                                if let pasted = UIPasteboard.general.string {
                                    editableBalanceString = pasted
                                }
                            }
                            .font(.system(size: 14))
                            .foregroundStyle(.purpleAccent)
                            .padding(EdgeInsets(top: 0, leading: 0, bottom: 0, trailing: -20))
                            
                            TextField("–ë–∞–ª–∞–Ω—Å", text: $editableBalanceString)
                                .keyboardType(.decimalPad)
                                .textFieldStyle(.plain)
                                .multilineTextAlignment(.trailing)
                                .frame(width: 70, height: 20, alignment: .trailing)
                                .foregroundStyle(Color.gray)
                                .onChange(of: editableBalanceString) { _, newValue in
                                    let filtered = newValue.filter { "0123456789.-,".contains($0) }
                                    let normalized = filtered.replacingOccurrences(of: ",", with: ".")
                                    let components = normalized.components(separatedBy: ".")
                                    let cleaned = components.count > 1 ? components[0] + "." + components[1] : components[0]
                                    editableBalanceString = cleaned
                                    if let value = Decimal(string: cleaned) {
                                        model.editableBalance = value
                                    }
                                }
                            
                        } else {
                            Text(model.account?.balance.formattedCurrency(currency: model.currency) ?? "")
                                .spoiler(isOn: $spoilerIsOn)
                                .onShake {
                                    print("–û–ø–∞—á–∫–∏ —Å–∫—Ä—ã–ª–∏ –¥–µ–Ω—å–≥–∏")
                                    spoilerIsOn.toggle()
                                }
                        }
                    }
                    .listRowBackground(currentMode == .view ? Color.accent : Color.white)
                    
                    HStack {
                        Text("–í–∞–ª—é—Ç–∞")
                        Spacer()
                        Text("\(model.currency)")
                            .foregroundStyle(currentMode == .view ? Color.black : Color.gray)
                        
                        if currentMode == .edit {
                            Button {
                                showingCurrencySheet = true
                            } label: {
                                HStack {
                                    Image(systemName: "chevron.right")
                                        .imageScale(.small)
                                        .foregroundColor(.gray)
                                }
                            }
                            .confirmationDialog("–í–∞–ª—é—Ç–∞", isPresented: $showingCurrencySheet, titleVisibility: .visible) {
                                Button("–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å ‚ÇΩ") {
                                    model.currency = "‚ÇΩ"
                                }
                                
                                Button("–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä $") {
                                    model.currency = "$"
                                }
                                
                                Button("–ï–≤—Ä–æ ‚Ç¨") {
                                    model.currency = "‚Ç¨"
                                }
                            }
                            .tint(Color.purpleAccent)
                        }
                    }
                    .onChange(of: currentMode) { _, newMode in
                        if newMode == .edit {
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                            editableBalanceString = model.editableBalance.description
                        }
                    }
                    .listRowBackground(currentMode == .view ? Color.accentLight : Color.white)
                    
                }
                .scrollContentBackground(.hidden)
                .scrollDismissesKeyboard(.interactively)
                .refreshable {
                    Task {
                        await model.loadAccount()
                    }
                }
                
            }
            .listRowSpacing(16)
            .navigationTitle("–ú–æ–π —Å—á–µ—Ç")
            .toolbar {
                Button(currentMode == .view ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å") {
                    if currentMode == .edit {
                        Task {
                            await model.updateBalance()
                        }
                    } else {
                        model.editableBalance = model.account?.balance ?? 0
                    }
                    currentMode = currentMode == .view ? .edit : .view
                }
                .tint(.purpleAccent)
            }
            .task {
                await model.loadAccount()
            }
        }
    }
}

#Preview {
    MainTabView()
}
