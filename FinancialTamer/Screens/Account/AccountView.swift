//
//  ContentView.swift
//  FinancialTamer
//
//  Created by –ê—Ä—Ç–µ–º –¢–∞–±–µ–Ω—Å–∫–∏–π on 08.06.2025.
//

import SwiftUI

enum AccountViewMode {
    case view
    case edit
}

struct AccountView: View {
    
    @ObservedObject var model = AccountModel()
    
    @State private var currentMode: AccountViewMode = .view
    @State private var showingCurrencySheet = false
    
    var body: some View {
        NavigationStack {
            ZStack(alignment: .bottomTrailing) {
                Color.background.ignoresSafeArea(edges: .top)
                
                List {
                    
                    HStack {
                        Text("üí∞    –ë–∞–ª–∞–Ω—Å")
                        Spacer()
                        if currentMode == .edit {
                            TextField("–ë–∞–ª–∞–Ω—Å", value: $model.editableBalance, format: .number)
                                .keyboardType(.decimalPad)
                                .textFieldStyle(.plain)
                                .multilineTextAlignment(.trailing)
                                .frame(width: 100, height: 20, alignment: .trailing)
                                .foregroundStyle(Color.gray)
                        } else {
                            Text(model.account?.balance.formattedCurrency(currency: model.currency) ?? "")
                        }
                    }
                    .listRowBackground(currentMode == .view ? Color.accent : Color.white)
                    
                    HStack {
                        Text("–í–∞–ª—é—Ç–∞")
                        Spacer()
                        Text("\(model.currency)")
                            .foregroundStyle(currentMode == .view ? Color.black : Color.gray)
                        
                        if currentMode == .edit {
                            Button {
                                showingCurrencySheet = true
                            } label: {
                                HStack {
                                    Image(systemName: "chevron.right")
                                        .imageScale(.small)
                                        .foregroundColor(.gray)
                                }
                            }
                            .confirmationDialog("–í–∞–ª—é—Ç–∞", isPresented: $showingCurrencySheet, titleVisibility: .visible) {
                                Button("–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å ‚ÇΩ") {
                                    model.currency = "‚ÇΩ"
                                }
                                
                                Button("–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä $") {
                                    model.currency = "$"
                                }
                                
                                Button("–ï–≤—Ä–æ ‚Ç¨") {
                                    model.currency = "‚Ç¨"
                                }
                            }
                            .tint(Color.purpleAccent)
                        }
                    }
                    .listRowBackground(currentMode == .view ? Color.accentLight : Color.white)
                    
                }
                .scrollContentBackground(.hidden)
                .scrollDismissesKeyboard(.interactively)
                
            }
            .listRowSpacing(16)
            .navigationTitle("–ú–æ–π —Å—á–µ—Ç")
            .toolbar {
                Button(currentMode == .view ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å") {
                    if currentMode == .edit {
                        Task {
                            await model.updateBalance()
                        }
                    } else {
                        model.editableBalance = model.account?.balance ?? 0
                    }
                    currentMode = currentMode == .view ? .edit : .view
                }
                .tint(.purpleAccent)
            }
            .task {
                await model.loadAccount()
            }
        }
    }
}

#Preview {
    MainTabView()
}
